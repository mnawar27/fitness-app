{"version":3,"sources":["components/CardViewer.tsx","components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","Prompt","Answer","UserList","users","setUsers","items","onChange","newUsers","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","setCard","reveal","deck","showAddCardModal","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1ae2ba7.chunk.js","sourcesContent":["import {Col, Card as BootstrapCard} from 'react-bootstrap';\nimport { Card } from '../interfaces/card';\n\nexport function CardViewer({card, answerRevealed}:\n     {card:Card, answerRevealed: boolean}): JSX.Element{\n    return <Col>\n    <BootstrapCard>\n        <BootstrapCard.Body>\n            <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\n            <BootstrapCard.Text>\n             <strong>Quiz</strong>: {card.Prompt}\n            </BootstrapCard.Text>\n            {answerRevealed && <BootstrapCard.Text>\n             <strong>Correct Answer</strong>: {card.Answer}\n            </BootstrapCard.Text>}\n        </BootstrapCard.Body>\n        </BootstrapCard>\n     </Col>\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\n\n\n\nexport function UserList({users, setUsers}: {users: Task[], setUsers:(t: Task[])=>void}): JSX.Element {\n    \n    function handleChange(newUsers: Task[]):void{\n        setUsers(newUsers);\n        \n    \n    }\n    return <EditableDndList items={users} onChange={handleChange} />;\n} ","import { Button, Col } from 'react-bootstrap';\nimport { Card } from '../interfaces/card';\nimport CARDS from '../assets/cards.json';\nimport { getRandomElement, shuffle } from '../utilities/data';\nimport { UserList } from './UserList';\nimport { useState } from 'react';\nimport { Task as User} from 'editable-dnd-list';\n\n\nexport const LOCAL_STORAGE_USERS = 'fitness-app-users';\n\nexport const INITIAL_USERS: User[]= [\n    {id: '1', text: \"Avocado\"},\n    {id: '2', text: \"Banana\"},\n    {id: '3', text: \"Blueberry\"},\n    {id: '4', text: \"Watermelon\"},\n    {id: '5', text: \"Passionfruit\"}\n]\n\nexport function getLocalStorageUsers(): User[]{\n    let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\n    if(rawUsers === null){\n        return [...INITIAL_USERS];\n    }\n    else {\n        return JSON.parse(rawUsers);\n    }\n\n}\nexport function ControlPanel({setCard, reveal, answerRevealed, deck, showAddCardModal}:\n    {setCard: (c: Card)=>void, reveal:(r: boolean)=>void, answerRevealed: boolean, showAddCardModal:(b: boolean)=>void, deck: Card[] }): JSX.Element{\n    const[users, setUsers] = useState<User[]>(getLocalStorageUsers());\n    \n    \n    function setRandomCard() {\n        reveal(false);\n        setCard(getRandomElement(deck))\n\n    }\n\n    function shuffleUsers(){\n        //let originalUsers = JSON.stringify(users);\n       // console.log(JSON.stringify(users));\n        let shuffledUsers: User[] = shuffle(users);\n        //console.log(JSON.stringify(shuffledUsers));\n        //console.log(originalUsers === JSON.stringify(shuffledUsers));\n        setUsers([...shuffledUsers]);\n    }\n\n    function save () {\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\n    }\n    function addNewCard(){\n        showAddCardModal(true);\n\n    }\n    return <Col>\n    <h1> Control Panel </h1>\n    <UserList users = {users} setUsers={setUsers}></UserList>\n    <Button onClick = {setRandomCard} className=\"m-4\"> Swap Curent Card </Button>\n    <Button onClick= {()=> reveal(!answerRevealed)} className=\"m-4\" > Reveal Answer </Button>\n    <Button onClick= {shuffleUsers} className=\"m-4\" > Shuffle Users </Button>\n    <Button onClick= {save} className=\"m-4\" variant = \"success\"> Save  </Button>\n    <Button onClick= {addNewCard} className=\"m-4\" > Add new card  </Button>\n    \n    </Col>\n}","// https://stackoverflow.com/a/5915122\n/**\n * Grab a random element from a list\n * @param items Any kind of list\n * @returns One randomly chosen element\n */\n\nexport function getRandomElement<T>(items:T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n\n//https://stackoverflow.com/a/2450976\n/**\n * Shuffles an array in-place\n * @param array Any array of elements \n * @returns The shuffled array (modified in-place)\n */\nexport function shuffle<T>(array: T[]):T[] {\n    let currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }","import React, { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport {Card } from '../interfaces/card';\n\nexport function AddCardModal({visible, setVisible, addCard}:\n    {visible: boolean, setVisible:(b: boolean)=>void,\n     addCard: (c: Card) => void}): JSX.Element{\n        const [Prompt, setPrompt] = useState<string>(\"QUIZ TEXT\");\n        const [Answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\n\n        function saveCard(){\n            \n            addCard({\n                ID: Math.random(),\n                Kind: \"Custom\",\n                Prompt, Answer\n            });\n            setVisible(false);\n        }\n\n    const hide = () => setVisible(false); \n    return (\n    <Modal show = {visible} onHide = {hide}>\n    <Modal.Header closeButton>\n      <Modal.Title>Add New Card</Modal.Title>\n    </Modal.Header>\n  \n    <Modal.Body>\n    <Form>\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\n            <Form.Label>Quiz Question</Form.Label>\n            <Form.Control as=\"textarea\" rows={3}\n                value={Prompt}\n                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>)=>setPrompt(ev.target.value)}/>\n            \n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextAreas\">\n         <Form.Label>Suggested Answer</Form.Label>\n         <Form.Control as=\"textarea\" rows={3}\n         value={Answer}\n         onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>)=>setAnswer(ev.target.value)}/>\n        </Form.Group>\n    </Form>\n    </Modal.Body>\n  \n    <Modal.Footer>\n      <Button variant=\"secondary\" onClick = {hide}>Close</Button>\n      <Button variant=\"primary\" onClick = {hide}>Save changes</Button>\n    </Modal.Footer>\n  </Modal>)\n}","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from './assets/cards.json';\nimport { CardViewer } from './components/CardViewer';\nimport { ControlPanel } from './components/ControlPanel'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport { Card } from './interfaces/card';\nimport { AddCardModal } from './components/AddCardModal';\n\n\n\nfunction App(): JSX.Element {\n  const[activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const[answerRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Card[]>(CARDS)\n\n  function addCard(newCard: Card){\n    setDeck([...deck, newCard])\n  }\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <ControlPanel \n          showAddCardModal = {setVisible}\n          setCard={setActiveCard} \n          reveal={reveal}\n          deck = {deck}\n          answerRevealed={answerRevealed}></ControlPanel>\n        <CardViewer card = {activeCard} answerRevealed={answerRevealed}></CardViewer>\n        <AddCardModal visible = {visible} setVisible = {setVisible}\n        addCard = {addCard}></AddCardModal>\n      </Row>\n      \n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}